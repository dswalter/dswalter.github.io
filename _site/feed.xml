<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Subjective functions</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://dswalter.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://dswalter.github.io" />
<updated>2015-12-08T11:19:20-05:00</updated>
<id>http://dswalter.github.io/</id>
<author>
  <name>Daniel Walter</name>
  <uri>http://dswalter.github.io/</uri>
  <email>ds$mylastname@theemailserviceprovidedbygoogle.com</email>
</author>


<entry>
  <title type="html"><![CDATA[A Look into Machine Learning's First Cheating Scandal]]></title>
  <link rel="alternate" type="text/html" href="http://dswalter.github.io/blog/machine-learnings-first-cheating-scandal/" />
  <id>http://dswalter.github.io/blog/machine-learnings-first-cheating-scandal</id>
  <updated>2015-12-08T00:00:00-00:00</updated>
  <published>2015-12-08T00:00:00-05:00</published>
  
  <author>
    <name>Daniel Walter</name>
    <uri>http://dswalter.github.io</uri>
    <email>ds$mylastname@theemailserviceprovidedbygoogle.com</email>
  </author>
  <content type="html">
    &lt;p&gt;At the end of May, the ImageNet Large Scale Visual Recognition Competition, or &lt;a href=&quot;http://www.image-net.org/challenges/LSVRC/&quot;&gt;LSVRC&lt;/a&gt; (currently the word’s top annual computer vision contest) announced that a team had violated competition policies by over-submitting results. The &lt;a href=&quot;http://www.image-net.org/challenges/LSVRC/announcement-June-2-2015&quot;&gt;follow-up post&lt;/a&gt; named a team from Baidu (the Chinese search giant) as the perpetrators of this offense and explained that Baidu had been banned from submitting results to the LSVRC for a twelve-month period. &lt;a href=&quot;http://www.technologyreview.com/view/538111/why-and-how-baidu-cheated-an-artificial-intelligence-test/&quot;&gt;MIT Technology review&lt;/a&gt; called it &lt;strong&gt;“Machine learning’s first cheating scandal.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The search giant’s response was swift. It’s not really possible to remove a paper from arXiv.org, so the offending team did the next best thing: they replaced &lt;a href=&quot;http://arxiv.org/abs/1501.02876v4.pdf&quot;&gt;this functional draft on arXiv&lt;/a&gt; with &lt;a href=&quot;http://arxiv.org/abs/1501.02876v5&quot;&gt;this nonexistent one&lt;/a&gt;. And the primary researcher for the paper, Dr. Ren Wu, &lt;a href=&quot;http://bits.blogs.nytimes.com/2015/06/11/baidu-fires-researcher-tied-to-contest-disqualification/&quot;&gt;was fired from his position&lt;/a&gt; as “distinguished scientist at Baidu’s Institute of Deep Learning.”&lt;/p&gt;

&lt;p&gt;To the non-practitioner, it might seem a bit extreme. Why would submitting answers to a contest too often be an offense worthy of termination for a promising academic with a &lt;a href=&quot;https://scholar.google.com/citations?user=0VxDjbcAAAAJ&amp;amp;hl=en&quot;&gt;good publication record&lt;/a&gt;? And why should an entire corporation be banned from an international computer vision competition over such a seemingly small incident?&lt;/p&gt;

&lt;p&gt;In order to address that question, we’re going to need to talk about some important concepts in machine learning. I talked about overfitting, regularization, and hyperparameter optimization in &lt;a href=&quot;http://dswalter.github.io/blog/overfitting-regularization-hyperparameters/&quot;&gt;this previous post&lt;/a&gt;. Next, let’s talk about benchmarking.&lt;/p&gt;

&lt;h4 id=&quot;benchmarking-and-breakthroughs&quot;&gt;Benchmarking and Breakthroughs&lt;/h4&gt;

&lt;p&gt;Machine learning (ML) is a very performance focused discipline: academics in ML do a lot of theoretical work, but the algorithms themselves are generally compared based on their performance on tasks that have specified training and testing data. The core idea is that when different algorithms are tested on the same data, we can gain a more objective sense of their relative performance. There are some major advantages to this, namely the objectivity of well-designed experimentation and the fact that strong performance will help even obscure researchers’ ideas rise to the top. We will talk about some of the potential problems with the focus on performance in a few paragraphs.&lt;/p&gt;

&lt;p&gt;As an example of this benchmarking tendency, in 1998 Yann LeCun (now head of Facebook’s FAIR and one of most influential researchers in computer vision) used the &lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot;&gt;MNIST dataset&lt;/a&gt; to evaluate most of the computer vision algorithms people were studying at the time. Partially as a result of that effort, the MNIST dataset became one of the most popular datasets to evaluate machine learning algorithms on, and &lt;a href=&quot;https://scholar.google.com/citations?view_op=view_citation&amp;amp;hl=en&amp;amp;user=WLN3QrAAAAAJ&amp;amp;citation_for_view=WLN3QrAAAAAJ:u5HHmVD_uO8C&quot;&gt;that particular article has had over 4200 citations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Various other computer vision datasets have emerged through the years, such as &lt;a href=&quot;http://www.vision.caltech.edu/Image_Datasets/Caltech101/&quot;&gt;Caltech 101&lt;/a&gt;, &lt;a href=&quot;http://authors.library.caltech.edu/7694/&quot;&gt;Caltech 256&lt;/a&gt;, and the PASCAL VOC (Visual Object Classes), but the release of &lt;a href=&quot;http://www.image-net.org/papers/imagenet_cvpr09.pdf&quot;&gt;ImageNet&lt;/a&gt; by Fei Fei Li et al. was the great leap forward. There’s so much to say about ImageNet (almost all of it breathlessly positive), but it’s enough to say that ImageNet dwarfs previous computer vision datasets in both the number of classes and images per class.&lt;/p&gt;

&lt;p&gt;Because of ImageNet’s scale, the LSVRC is a much more challenging competition than ones that came before it. With 1000 classes, the algorithms that succeed need to have high representation capacity, since they need to be able to discriminate between every class, which means there are \(n(n-1)/2=1000*(999)/2=499500\) decision boundaries between classes. In problems needing high representation capacity like this, more parameters are generally helpful; more parameters give an algorithm more room to hold what it has learned. Since multi-layer neural networks (shallow or deep) are universal function approximators that can accommodate billions of parameters based on how you structure them, it makes sense that neural networks of some kind (“deep learning”) would be an effective approach in computer vision.&lt;/p&gt;

&lt;p&gt;One difficulty with deep learning is that deep neural networks with billions of neurons take a long time to train. This was helped by a significant breakthrough in 2012 by Alex Krizhevsky, a PhD student at the time at the University of Toronto. Krizhevsky famously used the parallel computational capabilities of graphics cards (GPU’s) on a computer in his dorm room to drastically reduce training time for his convolutional neural network models. This meant he was able to train much larger models (with more layers and parameters and therefore higher representation capacity) than other researchers at the time, because he was able to obtain results in days rather than weeks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf&quot;&gt;That paper&lt;/a&gt; had a 9% lower absolute error rate than the next best result on LSVRC 2012 (winning with an error rate of 15.3% compared to the second best’s 26.2%). It was rightly hailed as a major breakthrough, and GPU training has become the standard method for training deep neural nets. The authors of that paper (Krizhevsky, Sutskever, and Hinton) created a deep learning startup called DeepMind that has joined Google to become &lt;a href=&quot;http://deepmind.com/&quot;&gt;Google DeepMind&lt;/a&gt;. I mention this story because it’s a quintessential example of a major breakthrough in a field: a new technique or idea that is broadly applicable and improves the entire field.&lt;/p&gt;

&lt;h4 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h4&gt;

&lt;p&gt;The ImageNet LSVRC has a rule in place that a machine learning system can only be submitted for evaluation on the test set twice a week. Since every submission needs to be evaluated on the same test set, this rule functions as a regularization parameter; limited access to submission makes for limited exposure for the competition’s most guarded secret, the scoring test set.&lt;/p&gt;

&lt;p&gt;This rule also restricts the amount of hyperparameter optimization, or in this case hyperparameter overfitting, that can be performed on the scoring test set. In machine learning, over time, the models tend toward better accuracy, because the best ideas tend to be absorbed into the best practices of the field (there are almost no papers focusing on 3 or 4-layer CNN’s these days, for example). And in the days of widespread publication of pre-prints on &lt;a href=&quot;arxiv.org&quot;&gt;the arXiv&lt;/a&gt;, those new ideas can spread through the community in a matter of days or weeks. Limiting submissions to twice per week means that hyperparameter optimization should only be able to have a limited effect relative to that overall trend toward forward progress.  I think this is the most important reason for the restriction, and this is why the Baidu scandal mattered so much.&lt;/p&gt;

&lt;p&gt;The Baidu team’s oversubmissions tilted the balance of forward progress on the LSVRC from algorithmic advances to hyperparameter optimization.&lt;/p&gt;

&lt;p&gt;Here is the response from Dr. Ren Wu after the initial scandal broke:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.enterprisetech.com/2015/06/12/baidu-fires-deep-images-ren-wu/&quot;&gt;“The key sentence here is, ‘Please note that you cannot make more than 2 submissions per week.’ It is our understanding that this is to say that one individual can at most upload twice per week. Otherwise, if the limit was set for a team, the proper text should be ‘your team’ instead,” Wu wrote. “Our team has submitted about 200 times total in its lifespan. Our paper have five authors, and so based [on] the rule above, we should be allowed to submit around 260 times. And so, our 200 submissions were well within the 260 limits set by the rule.”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The “two submissions per person” argument is fairly weak: if true, it would incentivize gathering large groups of collaborators merely to get more frequent result submissions. That would be unfair to researchers at smaller universities or companies with fewer connections in the field. It would be patently unfair. A more problematic sticking point is that it appears no other team took this view of the submission policy. The graph below shows that the Baidu team submitted results more times than all other teams combined. (Members of the Baidu team had to create multiple logins in order to circumvent the “two submissions per week” rule)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.image-net.org/challenges/LSVRC/figs/submissions_server.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This might conceivably be acceptable if the team were trying out a variety of algorithms and hyperparameters and seeing what sticks. As an outsider, I don’t have access to those records, so I can’t make any conclusive observations. But the graph below shows their results over the period of time they were submitting, and it is quite informative.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.image-net.org/challenges/LSVRC/figs/overview.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is an overall downward trend over that time, during which several other labs made major breakthroughs and received press coverage for achieving state-of-the-art results on the LSVRC. Many of the results for the Baidu team are scattered in performance, as though the team was trying many things to see what worked and some of those ways were less effective. That’s normal and probably healthy.&lt;/p&gt;

&lt;p&gt;But if you look at the bottom right, there are three areas of more clustered submissions. I hypothesize that these are three periods of hyperparameter optimization. The cluster I’ve circled in red appears to have been relatively ineffective. But the two periods I’ve highlighted in blue were successful; the blue ellipse on the bottom right culminates in their ‘winning’ submission. In contrast to the ‘great leap forward’ established in the Krizhevsky et al. paper, the Baidu team’s results show that hyperparameter optimization can still extract a little bit of performance out of algorithms in costly competitions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lsvrc-3.jpg&quot; alt=&quot;A slightly modified version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was intentional hyperparameter overfitting. Someone as experienced as Dr. Wu was would not have made such a mistake accidentally.  It was bad machine learning practice; this looks like a deliberate attempt to utilize an unfair competitive advantage.  When people think of “cheating” in a research context, they immediately think of fabricated results, but this violation also deserves that label.&lt;/p&gt;

&lt;h4 id=&quot;repercussions&quot;&gt;Repercussions&lt;/h4&gt;
&lt;p&gt;Setting aside the scandal, the fact that the Baidu team achieved ‘state-of-the-art’ results on the LSVRC by running hyperparameter optimization experiments likely means that the dataset is nearing the end of its run as &lt;em&gt;the&lt;/em&gt; benchmark in computer vision. For the first time since its inception, the major LSVRC classification challenge is not being held this year, and this scandal directly contributed to that. I imagine the ImageNet classification task will still live on as part of the battery of proving grounds an algorithm is evaluated on, much like how MNIST still lives on today, but I look forward to seeing what the next gold-standard computer vision dataset will be. Perhaps something related to video processing?&lt;/p&gt;

&lt;p&gt;And maybe we’re all a bit complicit in the problems raised here. The field uses best-case test results to show how well an algorithm works. But using the maximum score achieved by a particular algorithm is an inherently outlier-dependent measure. Is the absolute best performance achieved in one particular experiment really the best measure of the capabilities of an algorithm? Doesn’t this formulation inherently reward hyperparameter optimization? It would be very valuable to find ways to mitigate this outlier dependency.&lt;/p&gt;

&lt;p&gt;And, finally, to make sure we aren’t making lesser versions of the same mistake this Baidu team made, we should always use the train-validation-test framework (or even better, use crossvalidation for the train-validation splits). If you’re comparing two algorithms, you should only evaluate each model on the test set once. Do all your hyperparameter optimization on the train-validation set, leaving the scoring test set as un-learned-from as possible. Hyperparameter optimization on the scoring test set causes results ranging from somewhat suspect to actually fraudulent.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://dswalter.github.io/blog/machine-learnings-first-cheating-scandal/&quot;&gt;A Look into Machine Learning&#39;s First Cheating Scandal&lt;/a&gt; was originally published by Daniel Walter at &lt;a href=&quot;http://dswalter.github.io&quot;&gt;Subjective functions&lt;/a&gt; on December 08, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Overfitting, Regularization, and Hyperparameters]]></title>
  <link rel="alternate" type="text/html" href="http://dswalter.github.io/blog/overfitting-regularization-hyperparameters/" />
  <id>http://dswalter.github.io/blog/overfitting-regularization-hyperparameters</id>
  <updated>2015-11-29T00:00:00-00:00</updated>
  <published>2015-11-29T00:00:00-05:00</published>
  
  <author>
    <name>Daniel Walter</name>
    <uri>http://dswalter.github.io</uri>
    <email>ds$mylastname@theemailserviceprovidedbygoogle.com</email>
  </author>
  <content type="html">
    &lt;p&gt;(This lays the ground work for the next post, which was getting too long to be effective.)&lt;/p&gt;

&lt;h3 id=&quot;overfitting&quot;&gt;Overfitting&lt;/h3&gt;

&lt;p&gt;One of the goals of machine learning is generalizability. A model that only works on the exact data it was trained on is effectively useless. Let’s say you’re tasked with creating a bird-recognition system. If you train a model to recognize pictures of birds, and it gets 100% accuracy on the 130 pictures of 10 classes of birds you showed it, is it a good model?&lt;/p&gt;

&lt;p&gt;It might be, but it depends on how the model performs on images it was not trained on. If performance measures on both the training set and the test set are good, then the model is performing well. But if performance on the test set is bad, then that model is not particularly useful. Through some mechanism, your model has ‘memorized’ the 1300 pictures you showed it. You already had those pictures, so you don’t gain anything by using the model.&lt;/p&gt;

&lt;p&gt;In an ideal world, your algorithm would be able to to discriminate between different types of birds, even if the pictures are very different from the examples it has seen before. To do that, it needs to identify features of those birds that are constant for each bird rather than features of a particular picture or photography session. There are a number of ways an algorithm might try to characterize a Blue-Faced Parrot Finch from this picture below, for eample. One good feature might be to recognize that the Blue-Faced Parrot Finch has an area on its face that is blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Blue-faced_Parrotfinch.jpg/1024px-Blue-faced_Parrotfinch.jpg&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Blue-faced_Parrotfinch.jpg/1024px-Blue-faced_Parrotfinch.jpg&quot;&gt;credit for this image: Wikipedia user Nrg800&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We might want to check another picture to see if this feature is consistently present.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cliftonfinchaviaries.org/fsa/blue/bf9.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cliftonfinchaviaries.org&quot;&gt;credit for this image:  www.cliftonfinchaviaries.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far so good. This picture of a Blue-Faced Parrot Finch also has a blue face; it seems like a good feature to use to characterize this bird. But what if the algorithm identified a different feature? In the first picture, the bird stood on a forked branch. If ‘forked branch’ was one of the features it used to identify this bird, it would not have generalized to all pictures of this bird. Or, in both of these pictures, the bird is facing to the right; the algorithm might decide that facing to the right is a defining characteristic of this finch. In machine learning, we call these cases &lt;em&gt;overfitting&lt;/em&gt;: an algorithm learns non-generalizable characteristics only present in the training data.&lt;/p&gt;

&lt;p&gt;Overfitting is one of the hidden specters of the field. As the complexity of your model increases, the potential for overfitting increases as well. In this illustration below, the blue line represents the error rate on the training data, and the red line represents the error rate on the testing data.
&lt;img src=&quot;http://www.richardcorbridge.com/wp-content/uploads/2013/09/Overfitting.png&quot; alt=&quot;http://www.richardcorbridge.com/wp-content/uploads/2013/09/Overfitting.png&quot; /&gt;
&lt;a href=&quot;www.richardcorbridge.com&quot;&gt;h/t to Richard Corbridge for this clean overfitting graphic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the representation capacity of your model increases, it is better able to capture variation in the training data, so the blue line monotonically decreases. The red line (testing data error rate) follows that trajectory initially: the model is learning things that are generalizable. But at some point, the model starts to learn features specific to the training data (like our forked branch above), and performance on the testing data begins to suffer: the test data isn’t exactly like the training data, so the ‘memorized’ features hurt generalizability.&lt;/p&gt;

&lt;h3 id=&quot;regularization&quot;&gt;Regularization&lt;/h3&gt;

&lt;p&gt;But complex problems require complex algorithms that can make very subtle distinctions. Right now, almost all the fun tasks (computer vision, question answering, speech recognition, etc.) fall under that umbrella. If we must use a complex algorithm, how can we avoid overfitting?&lt;/p&gt;

&lt;p&gt;The simplest way to avoid overfitting is to give the algorithms too much data to overfit on. By overwhelming the algorithm with data, you force it to decide what is important.  An algorithm that only memorizes the most recent examples it has seen will be exposed by poor performance on the test set. An algorithm that is making wise choices about what is important for it to learn and what isn’t, will improve when given tons of data. For most supervised learning problems, however, labeled data is often prohibitively expensive, so this solution isn’t always feasible.&lt;/p&gt;

&lt;p&gt;Another way to do that is to use a technique called &lt;a href=&quot;https://en.wikipedia.org/wiki/Regularization_%28mathematics%29&quot;&gt;&lt;em&gt;regularization&lt;/em&gt;&lt;/a&gt; to keep overfitting at bay. Without going into details, this technique introduces a complexity penalty that “punishes” the machine learning algorithm for letting the parameters get too large (which usually means overfitting). That is to say, it incorporates a mechanism in the algorithm itself which restricts parameters of the algorithm to make it learn in a way we think is less likely to overfit. Regularization is wildly popular, especially in situations where the data is high-dimensional (lots of different variables).&lt;/p&gt;

&lt;h3 id=&quot;hyperparameter-optimization&quot;&gt;Hyperparameter Optimization&lt;/h3&gt;

&lt;p&gt;When introducing a regularization method, you have to decide how much weight you want to give to that regularization method. You can pick larger or smaller values for your complexity penalty depending on how much you think overfitting is going to be a problem for your current use case. This exposes one of the open secrets of machine learning: the goal is to get the computer to learn how to make decisions automatically, but there are values (like the size of the complexity penalty) impacting performance that must be chosen.&lt;/p&gt;

&lt;p&gt;Every machine learning algorithm has these values, called &lt;em&gt;hyperparameters&lt;/em&gt;. These hyperparameters are values or functions that govern the way the algorithm behaves. Think of them like the dials and switches on a vintage amplifier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://bb3blog.files.wordpress.com/2012/06/san-505-copy.jpg&quot; alt=&quot;fewer hyperparameters than the average deep neural network&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are different combinations of amp settings that are better suited to produce different types of sounds; similarly, different configurations of hyperparameters work better for different tasks. Hyperparameters include things like the number of layers in a &lt;a href=&quot;http://ufldl.stanford.edu/tutorial/supervised/ConvolutionalNeuralNetwork/&quot;&gt;convolutional neural network&lt;/a&gt; or the number of neighbors used in a &lt;a href=&quot;https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm&quot;&gt;nearest neighbor classifier&lt;/a&gt;, and they can have a massive impact on how the algorithm performs. Once, I used latent dirichlet allocation &lt;a href=&quot;http://ai.stanford.edu/~ang/papers/nips01-lda.pdf&quot;&gt;(a topic modeling algorithm)&lt;/a&gt; as part of a classification task, and I found that by changing the \(\alpha\) and \(\beta\) parameters, the prediction accuracy on my test set could vary from 0.04 to 0.41. That’s an order of magnitude of difference based on fiddling with two dials.&lt;/p&gt;

&lt;p&gt;Finding the best combination of hyperparameters is called &lt;em&gt;hyperparameter optimization&lt;/em&gt;; it is almost impossible to beat state of the art methods without performing hyperparameter optimization. But there are some subtle dangers. Using one algorithm “out-of-the-box” and laboriously tuning hyperparameters for another example leads to an unfair comparison: in general, hyperparameter optimization squeezes out better performance. A better algorithm will in general outperform a worse algorithm, but sometimes, you can find the perfect combination of hyperparameters, which will allow the best-case version of the lesser algorithm to beat an average version of the better algorithm. Choosing the best hyperparameters is like playing with the dials of one amp until you find the perfect sound; It’s not really fair to compare the sound of a perfectly-adjusted amplifier with one you use default settings on.&lt;/p&gt;

&lt;p&gt;And most vexingly, hyperparameter optimization can lead to overfitting: if a researcher runs 400 experiments on the same train-test splits, then performance on the test data is being incorporated into the training data by choice of hyperparameters. This is true even if regularization is being used! With each time an algorithm is evaluated on the test data, that test data becomes less useful as an “unsullied” evaluator of performance. By the 400th or 4000th evaluation, the test data holds very little mystery and is no longer functioning as a test dataset; it has become a secondary training set.&lt;/p&gt;

&lt;p&gt;There are some strategies that attempt to mitigate this problem: one is to use a train-validation-test split, where the hyperparameters are tuned based on performance on the validation set. This leads to potential concerns about overfitting to the validation set, but the test set is left more “intact” is cross-validation, where the data are split into \(n\) train-test sets. But this mostly just shares the overexposure problem with a larger test dataset (since everything is eventually tested rather than a small subset). But that sharing only postpones the inevitable. The problem still remains that exposure means evaluation is performed on a decreasingly ‘unsullied’ test set.&lt;/p&gt;

&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h3&gt;
&lt;p&gt;In the attempt to move toward generalizable machine learning, we try to find algorithms that perform well on training data and testing data, using regularization to pursue that goal wherever possible. And, in general, if two algorithms achieve the same performance on a task, the one with less hyperparameter optimization is generally preferable.&lt;/p&gt;

&lt;p&gt;Machine learning competitions that reward only the single highest-performing team provide a bit of a mixed bag, then. It’s typically impossible to win those competitions without a great algorithm and some hyperparameter optimization. But it becomes difficult to separate the gains that come from better algorithms and the gains that come from more judicious hyperparameter choices. I’ll get into this a bit more with my next post.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://dswalter.github.io/blog/overfitting-regularization-hyperparameters/&quot;&gt;Overfitting, Regularization, and Hyperparameters&lt;/a&gt; was originally published by Daniel Walter at &lt;a href=&quot;http://dswalter.github.io&quot;&gt;Subjective functions&lt;/a&gt; on November 29, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Machine Learning is Magic]]></title>
  <link rel="alternate" type="text/html" href="http://dswalter.github.io/blog/machine-learning-is-magic/" />
  <id>http://dswalter.github.io/blog/machine-learning-is-magic</id>
  <updated>2015-10-02T00:00:00-00:00</updated>
  <published>2015-10-02T00:00:00-04:00</published>
  
  <author>
    <name>Daniel Walter</name>
    <uri>http://dswalter.github.io</uri>
    <email>ds$mylastname@theemailserviceprovidedbygoogle.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Perhaps you have heard of the the sophisticated, elegant &lt;a href=&quot;https://github.com/panicsteve/cloud-to-butt&quot;&gt;Cloud-to-Butt plugin&lt;/a&gt;, which searches through the text on a website for the phrase “The Cloud” and replaces it with “My Butt”. &lt;a href=&quot;http://gizmodo.com/the-best-of-cloud-to-butt-the-only-extension-youll-eve-1685863609&quot;&gt;This compilation&lt;/a&gt; shows some of the most urbane results.&lt;/p&gt;

&lt;p&gt;It struck me that if you replaced “Machine Learning Algorithm” with “Magic Spell” in many contexts, the content would feel very similar.&lt;/p&gt;

&lt;p&gt;So I put together a Chrome plugin called “Machine Learning is Magic” that you can  &lt;a href=&quot;https://chrome.google.com/webstore/detail/machine-learning-is-magic/miejfpgjbmgjkhdflhkdnnkhmpknibmc?hl=en&quot;&gt;download here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/dswalter/machine-learning-is-magic/master/images/machine-learning-screenshot.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/dswalter/machine-learning-is-magic/raw/master/images/magic-screenshot.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And you get fun intro sites like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/a-tour-of-magic-spells.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ended up going a bit overboard and doing a few more replacements: “data” becomes “Raw Magic Material”, “probability” becomes “The Fates”, etc. I had fun with it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dswalter/machine-learning-is-magic&quot;&gt;The code&lt;/a&gt; is a bit janky, so pull requests are welcome. And if you think I should make the simpler version that only replaces “machine learning algorithm” with “magic spells”, leave a comment. Enjoy!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://dswalter.github.io/blog/machine-learning-is-magic/&quot;&gt;Machine Learning is Magic&lt;/a&gt; was originally published by Daniel Walter at &lt;a href=&quot;http://dswalter.github.io&quot;&gt;Subjective functions&lt;/a&gt; on October 02, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Talking Talking Machines]]></title>
  <link rel="alternate" type="text/html" href="http://dswalter.github.io/blog/talking-talking-machines/" />
  <id>http://dswalter.github.io/blog/talking-talking-machines</id>
  <updated>2015-09-17T00:00:00-00:00</updated>
  <published>2015-09-18T00:00:00-04:00</published>
  
  <author>
    <name>Daniel Walter</name>
    <uri>http://dswalter.github.io</uri>
    <email>ds$mylastname@theemailserviceprovidedbygoogle.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://www.thetalkingmachines.com/&quot;&gt;Talking Machines&lt;/a&gt; is currently THE machine learning podcast. Last fall when it started out, I was intrigued that someone was starting a podcast focusing specifically on machine learning. But I didn’t really listen until this summer, which was my loss. Now that I’m catching up on it, I think it’s terrific.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static1.squarespace.com/static/54a56ccbe4b0ab38fed9fc81/t/54a56d1fe4b0c309d01404ce/1442025843814/?format=1500w&quot; alt=&quot;talking machines logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As an completely biased person, I think everyone should listen to it; but I do unabashedly love the subject material. The initial segment of each episode is usually a clear introduction to a common ML concepts, the likes of which you might encounter in an introductory ML class. Then the interviews touch on a wide range of the interviewee’s research focus, work, and thoughts on the field. I’m not sure if it’s interesting and fun as a cold-start introduction to the material, but as someone who works in the field, I’m firmly in their target audience. At times, it’s almost a water-cooler discussion for the ML set.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.seas.harvard.edu/directory/rpa&quot;&gt;Dr. Ryan Adams&lt;/a&gt;, a Cambridge-trained ML researcher, has a good combination of breadth and depth of knowledge in the field, and his insights guide the discussion to some interesting places.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.katherinelgorman.com/&quot;&gt;Katherine Gorman&lt;/a&gt; brings an air of professionalism to the podcast. I imagine it’s primarily her editing that keeps the final product smooth to listen to.&lt;/p&gt;

&lt;p&gt;And the guests have been fantastic. I knew they were going to have great interview subjects when the first teaser was the Deep Learning Conspiracy (Hinton, LeCun, and Bengio). Ilya Sutskever’s interview was insightful, as was Hanna Wallach’s where she told the history of the &lt;a href=&quot;http://wimlworkshop.dreamhosters.com/&quot;&gt;Women In Machine Learning (WIML)&lt;/a&gt; conference.  I’m not friends with Geoff Hinton, but Talking Machines gives me a glimpse into his more nuanced opinions on what’s going on ML. Adams has the cachet to get prominent researchers to join the podcast; I imagine it helps that there are so few venues for these researchers to talk about their to listeners who actually care.&lt;/p&gt;

&lt;p&gt;They’ve launched &lt;a href=&quot;https://www.kickstarter.com/projects/487384857/tote-bag-productions-talking-machines&quot;&gt;a kickstarter&lt;/a&gt; to fund their second season. I follow a pretty simple rule for Kickstarter-type-things: do I want to live in a world where this product exists?&lt;/p&gt;

&lt;p&gt;I do, so I’m backing the second season.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://dswalter.github.io/blog/talking-talking-machines/&quot;&gt;Talking Talking Machines&lt;/a&gt; was originally published by Daniel Walter at &lt;a href=&quot;http://dswalter.github.io&quot;&gt;Subjective functions&lt;/a&gt; on September 18, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Why Blog?]]></title>
  <link rel="alternate" type="text/html" href="http://dswalter.github.io/blog/why-blog/" />
  <id>http://dswalter.github.io/blog/why-blog</id>
  <updated>2015-08-18T00:00:00-00:00</updated>
  <published>2015-08-12T00:00:00-04:00</published>
  
  <author>
    <name>Daniel Walter</name>
    <uri>http://dswalter.github.io</uri>
    <email>ds$mylastname@theemailserviceprovidedbygoogle.com</email>
  </author>
  <content type="html">
    &lt;p&gt;A question anyone starting a blog in 2015 should answer:&lt;/p&gt;

&lt;h5 id=&quot;why&quot;&gt;Why?&lt;/h5&gt;

&lt;p&gt;Like a lot of people, I think things through more throughly and with more discipline when writing them down. If I just consider a topic, I can tend to get into habits of thought. So the act of writing things out tends to give me clearer opinions on a topic.&lt;/p&gt;

&lt;h5 id=&quot;why-not-not-keep-a-journal-then&quot;&gt;Why not not keep a journal, then?&lt;/h5&gt;

&lt;p&gt;That’s a good idea, and I do, sometimes. But I don’t challenge myself nearly as well as other people do. Having a blog where I write out my opinions puts me in a place where other people can bring their perspectives to bear. And I have a few ideas I’d like to put out there.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://dswalter.github.io/blog/why-blog/&quot;&gt;Why Blog?&lt;/a&gt; was originally published by Daniel Walter at &lt;a href=&quot;http://dswalter.github.io&quot;&gt;Subjective functions&lt;/a&gt; on August 12, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>